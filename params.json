{"name":"Baseclass","body":"# Object-oriented inheritance in JavaScript\r\n\r\nUsed to traditional object-oriented languages, I found JavaScript's prototype-based inheritance confusing. Also I hated to repeatedly type the four-step JavaScript procedure for inheritance. We have computers for this! So I wrote this small utility function, which derives a subclass in one step and avoids polluting the prototype with instance variables of the parent class.\r\nUsage\r\n\r\nThis module consists of one class _BaseClass_, the root of an object-oriented inheritance tree, which has one method _extend()_. This method _extend()_ is used to derive a subclass from a parent class. It is used like\r\n\r\n    subclass = parentclass.extend(ctor, prot);\r\n\r\nwith _ctor_ the constructor function and _prot_ an object containing the prototype definitions (methods in object oriented language).","tagline":"Object-oriented inheritance with JavaScript","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}